{"id":"K5Do","dependencies":[{"name":"E:\\Projects\\markdown-notes-app\\package.json","includedInParent":true,"mtime":1666714498935},{"name":"E:\\Projects\\markdown-notes-app\\node_modules\\react-mde\\package.json","includedInParent":true,"mtime":1666394443373},{"name":"../../util/MarkdownUtil","loc":{"line":4,"column":29,"index":136},"parent":"E:\\Projects\\markdown-notes-app\\node_modules\\react-mde\\lib\\js\\commands\\default-commands\\codeCommand.js","resolved":"E:\\Projects\\markdown-notes-app\\node_modules\\react-mde\\lib\\js\\util\\MarkdownUtil.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.codeCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.codeCommand = {\n    buttonProps: { \"aria-label\": \"Insert code\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: initialState.text,\n            selection: initialState.selection\n        });\n        var state1 = textApi.setSelectionRange(newSelectionRange);\n        // when there's no breaking line\n        if (state1.selectedText.indexOf(\"\\n\") === -1) {\n            textApi.replaceSelection(\"`\" + state1.selectedText + \"`\");\n            // Adjust the selection to not contain the **\n            var selectionStart_1 = state1.selection.start + 1;\n            var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n            textApi.setSelectionRange({\n                start: selectionStart_1,\n                end: selectionEnd_1\n            });\n            return;\n        }\n        var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n        var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n        var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n        var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n        textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n        var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n        var selectionEnd = selectionStart + state1.selectedText.length;\n        textApi.setSelectionRange({\n            start: selectionStart,\n            end: selectionEnd\n        });\n    }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.codeCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.codeCommand = {\n    buttonProps: { \"aria-label\": \"Insert code\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: initialState.text,\n            selection: initialState.selection\n        });\n        var state1 = textApi.setSelectionRange(newSelectionRange);\n        // when there's no breaking line\n        if (state1.selectedText.indexOf(\"\\n\") === -1) {\n            textApi.replaceSelection(\"`\" + state1.selectedText + \"`\");\n            // Adjust the selection to not contain the **\n            var selectionStart_1 = state1.selection.start + 1;\n            var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n            textApi.setSelectionRange({\n                start: selectionStart_1,\n                end: selectionEnd_1\n            });\n            return;\n        }\n        var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n        var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n        var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n        var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n        textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n        var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n        var selectionEnd = selectionStart + state1.selectedText.length;\n        textApi.setSelectionRange({\n            start: selectionStart,\n            end: selectionEnd\n        });\n    }\n};\n"},"lineCount":40}},"error":null,"hash":"3cd65a925b231beca0b7cf617fe7ce79","cacheData":{"env":{}}}